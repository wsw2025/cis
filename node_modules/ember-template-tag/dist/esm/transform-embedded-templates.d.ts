import { SourceLocation } from '@babel/types';
type PreprocessOptions = {
    ast?: Node;
    input: string;
    templateTag?: string;
    relativePath: string;
    explicitMode?: boolean;
    linterMode?: boolean;
    babelPlugins?: any[];
    includeSourceMaps?: boolean | 'inline' | 'both';
    getTemplateLocals?: (html: string, options?: any) => string[];
};
type Replacement = {
    original: {
        loc: Required<SourceLocation>;
        range: [number, number];
        contentRange: [number, number];
    };
    replaced: {
        range: [number, number];
    };
};
export declare function transformForLint(options: PreprocessOptions): {
    output: string;
    replacements: Replacement[];
    templateCallSpecifier: any;
};
export declare function transform(options: PreprocessOptions): {
    output: string;
    map: {
        version: number;
        sources: string[];
        names: string[];
        sourceRoot?: string | undefined;
        sourcesContent?: string[] | undefined;
        mappings: string;
        file: string;
    } | null | undefined;
};
export declare function doTransform(options: PreprocessOptions): {
    output: string;
    replacements?: undefined;
    templateCallSpecifier?: undefined;
    map?: undefined;
} | {
    output: string;
    replacements: Replacement[];
    templateCallSpecifier: any;
    map?: undefined;
} | {
    output: string;
    map: {
        version: number;
        sources: string[];
        names: string[];
        sourceRoot?: string | undefined;
        sourcesContent?: string[] | undefined;
        mappings: string;
        file: string;
    } | null;
    replacements?: undefined;
    templateCallSpecifier?: undefined;
};
export {};
